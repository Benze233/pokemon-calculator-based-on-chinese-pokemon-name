# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pokemon_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QGraphicsScene
from PyQt5.Qt import *
import csv
import sys
from plot_class import Figure_Canvas

#将宝可梦数据读取进入内存
database=[]
temperment=[]

with open('pokemon_database.csv','r') as fh:
    reader=csv.DictReader(fh)
    for row in reader:
        database.append(row)
with open('pokemon_temp.csv',encoding='utf-8') as fh:
    reader=csv.DictReader(fh)
    for row in reader:
        temperment.append(row)
for i in temperment:
    i["性格"]=i.pop('\ufeff性格')

class Ui_widget_Ui(QWidget):
    data=database
    Temperment=temperment
    def __init__(self,data):
        super(QWidget,self).__init__()
        self.setupUi(self)
        self.initdata(data)
        self.setrange()
        self.buildconnection()
    def setupUi(self, widget_Ui):
        widget_Ui.setObjectName("宝可梦计算器")
        widget_Ui.setEnabled(True)
        widget_Ui.resize(1700, 1200)
        widget_Ui.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.nature = QtWidgets.QLabel(widget_Ui)
        self.nature.setGeometry(QtCore.QRect(160, 500, 110, 40))
        self.nature.setScaledContents(False)
        self.nature.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.nature.setObjectName("nature")
        self.growth = QtWidgets.QLabel(widget_Ui)
        self.growth.setGeometry(QtCore.QRect(446, 505, 71, 40))
        self.growth.setScaledContents(True)
        self.growth.setAlignment(QtCore.Qt.AlignCenter)
        self.growth.setObjectName("growth")
        self.individual = QtWidgets.QLabel(widget_Ui)
        self.individual.setGeometry(QtCore.QRect(240, 500, 91, 40))
        self.individual.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.individual.setObjectName("individual")
        self.value_star = QtWidgets.QGraphicsView(widget_Ui)
        self.value_star.setGeometry(QtCore.QRect(800, 400, 751, 611))
        self.value_star.setObjectName("value_star")
        self.pokemon_icon = QtWidgets.QLabel(widget_Ui)
        self.pokemon_icon.setGeometry(QtCore.QRect(360, 280, 191, 181))
        self.pokemon_icon.setText("")
        self.pokemon_icon.setObjectName("pokemon_icon")
        self.Hp_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.Hp_growth_v.setGeometry(QtCore.QRect(710, 560, 40, 25))
        self.Hp_growth_v.setObjectName("Hp_growth_v")
        self.attack = QtWidgets.QLabel(widget_Ui)
        self.attack.setGeometry(QtCore.QRect(102, 628, 80, 20))
        self.attack.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.attack.setObjectName("attack")
        self.attack_n = QtWidgets.QLabel(widget_Ui)
        self.attack_n.setGeometry(QtCore.QRect(160, 628, 40, 25))
        self.attack_n.setText("")
        self.attack_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.attack_n.setObjectName("attack_n")
        self.attack_i = QtWidgets.QLineEdit(widget_Ui)
        self.attack_i.setGeometry(QtCore.QRect(240, 628, 40, 25))
        self.attack_i.setObjectName("attack_i")
        self.attack_slider = QtWidgets.QSlider(widget_Ui)
        self.attack_slider.setGeometry(QtCore.QRect(300, 632, 400, 16))
        self.attack_slider.setMaximum(252)
        self.attack_slider.setOrientation(QtCore.Qt.Horizontal)
        self.attack_slider.setObjectName("attack_slider")
        self.attack_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.attack_growth_v.setGeometry(QtCore.QRect(710, 628, 40, 25))
        self.attack_growth_v.setObjectName("attack_growth_v")
        self.defence = QtWidgets.QLabel(widget_Ui)
        self.defence.setGeometry(QtCore.QRect(102, 696, 80, 20))
        self.defence.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.defence.setObjectName("defence")
        self.defence_n = QtWidgets.QLabel(widget_Ui)
        self.defence_n.setGeometry(QtCore.QRect(160, 696, 40, 25))
        self.defence_n.setText("")
        self.defence_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.defence_n.setObjectName("defence_n")
        self.defence_i = QtWidgets.QLineEdit(widget_Ui)
        self.defence_i.setGeometry(QtCore.QRect(240, 696, 40, 25))
        self.defence_i.setObjectName("defence_i")
        self.Hp = QtWidgets.QLabel(widget_Ui)
        self.Hp.setGeometry(QtCore.QRect(102, 560, 80, 20))
        self.Hp.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.Hp.setObjectName("Hp")
        self.Hp_n = QtWidgets.QLabel(widget_Ui)
        self.Hp_n.setGeometry(QtCore.QRect(160, 560, 40, 25))
        self.Hp_n.setText("")
        self.Hp_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.Hp_n.setObjectName("Hp_n")
        self.Hp_i = QtWidgets.QLineEdit(widget_Ui)
        self.Hp_i.setGeometry(QtCore.QRect(240, 560, 40, 25))
        self.Hp_i.setObjectName("Hp_i")
        self.Hp_slider = QtWidgets.QSlider(widget_Ui)
        self.Hp_slider.setGeometry(QtCore.QRect(300, 564, 400, 16))
        self.Hp_slider.setMaximum(252)
        self.Hp_slider.setOrientation(QtCore.Qt.Horizontal)
        self.Hp_slider.setObjectName("Hp_slider")
        self.defence_slider = QtWidgets.QSlider(widget_Ui)
        self.defence_slider.setGeometry(QtCore.QRect(300, 700, 400, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(50)
        sizePolicy.setVerticalStretch(20)
        sizePolicy.setHeightForWidth(self.defence_slider.sizePolicy().hasHeightForWidth())
        self.defence_slider.setSizePolicy(sizePolicy)
        self.defence_slider.setMaximum(252)
        self.defence_slider.setOrientation(QtCore.Qt.Horizontal)
        self.defence_slider.setObjectName("defence_slider")
        self.defence_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.defence_growth_v.setGeometry(QtCore.QRect(710, 696, 40, 25))
        self.defence_growth_v.setObjectName("defence_growth_v")
        self.s_attack = QtWidgets.QLabel(widget_Ui)
        self.s_attack.setGeometry(QtCore.QRect(102, 764, 80, 20))
        self.s_attack.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.s_attack.setObjectName("s_attack")
        self.s_attack_n = QtWidgets.QLabel(widget_Ui)
        self.s_attack_n.setGeometry(QtCore.QRect(160, 764, 40, 25))
        self.s_attack_n.setText("")
        self.s_attack_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.s_attack_n.setObjectName("s_attack_n")
        self.s_attack_i = QtWidgets.QLineEdit(widget_Ui)
        self.s_attack_i.setGeometry(QtCore.QRect(240, 764, 40, 25))
        self.s_attack_i.setObjectName("s_attack_i")
        self.s_attack_slider = QtWidgets.QSlider(widget_Ui)
        self.s_attack_slider.setGeometry(QtCore.QRect(300, 768, 400, 16))
        self.s_attack_slider.setMaximum(252)
        self.s_attack_slider.setOrientation(QtCore.Qt.Horizontal)
        self.s_attack_slider.setObjectName("s_attack_slider")
        self.s_attack_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.s_attack_growth_v.setGeometry(QtCore.QRect(710, 764, 40, 25))
        self.s_attack_growth_v.setObjectName("s_attack_growth_v")
        self.s_defence = QtWidgets.QLabel(widget_Ui)
        self.s_defence.setGeometry(QtCore.QRect(102, 832, 80, 20))
        self.s_defence.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.s_defence.setObjectName("s_defence")
        self.s_defence_n = QtWidgets.QLabel(widget_Ui)
        self.s_defence_n.setGeometry(QtCore.QRect(160, 832, 40, 25))
        self.s_defence_n.setText("")
        self.s_defence_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.s_defence_n.setObjectName("s_defence_n")
        self.s_defence_i = QtWidgets.QLineEdit(widget_Ui)
        self.s_defence_i.setGeometry(QtCore.QRect(240, 832, 40, 25))
        self.s_defence_i.setObjectName("s_defence_i")
        self.s_defence_slider = QtWidgets.QSlider(widget_Ui)
        self.s_defence_slider.setGeometry(QtCore.QRect(300, 836, 400, 16))
        self.s_defence_slider.setMaximum(252)
        self.s_defence_slider.setOrientation(QtCore.Qt.Horizontal)
        self.s_defence_slider.setObjectName("s_defence_slider")
        self.s_defence_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.s_defence_growth_v.setGeometry(QtCore.QRect(710, 832, 40, 25))
        self.s_defence_growth_v.setObjectName("s_defence_growth_v")
        self.speed = QtWidgets.QLabel(widget_Ui)
        self.speed.setGeometry(QtCore.QRect(102, 900, 80, 20))
        self.speed.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.speed.setObjectName("speed")
        self.speed_n = QtWidgets.QLabel(widget_Ui)
        self.speed_n.setGeometry(QtCore.QRect(160, 900, 40, 25))
        self.speed_n.setText("")
        self.speed_n.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.speed_n.setObjectName("speed_n")
        self.speed_i = QtWidgets.QLineEdit(widget_Ui)
        self.speed_i.setGeometry(QtCore.QRect(240, 900, 40, 25))
        self.speed_i.setObjectName("speed_i")
        self.speed_slider = QtWidgets.QSlider(widget_Ui)
        self.speed_slider.setGeometry(QtCore.QRect(300, 904, 400, 16))
        self.speed_slider.setMaximum(252)
        self.speed_slider.setOrientation(QtCore.Qt.Horizontal)
        self.speed_slider.setObjectName("speed_slider")
        self.speed_growth_v = QtWidgets.QLineEdit(widget_Ui)
        self.speed_growth_v.setGeometry(QtCore.QRect(710, 900, 40, 25))
        self.speed_growth_v.setObjectName("speed_growth_v")
        self.Level_l = QtWidgets.QLabel(widget_Ui)
        self.Level_l.setGeometry(QtCore.QRect(100, 360, 100, 35))
        self.Level_l.setObjectName("Level_l")
        self.Level = QtWidgets.QComboBox(widget_Ui)
        self.Level.setGeometry(QtCore.QRect(100, 400, 100, 35))
        self.Level.setEditable(True)
        self.Level.setObjectName("Level")
        self.Temp_l = QtWidgets.QLabel(widget_Ui)
        self.Temp_l.setGeometry(QtCore.QRect(750, 250, 100, 35))
        self.Temp_l.setObjectName("Temp_l")
        self.Temp = QtWidgets.QComboBox(widget_Ui)
        self.Temp.setGeometry(QtCore.QRect(750, 290, 300, 35))
        self.Temp.setObjectName("Temp")
        self.line_2 = QtWidgets.QFrame(widget_Ui)
        self.line_2.setGeometry(QtCore.QRect(810, 138, 16, 80))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.note = QtWidgets.QComboBox(widget_Ui)
        self.note.setGeometry(QtCore.QRect(820, 175, 360, 35))
        self.note.setObjectName("note")
        self.numl = QtWidgets.QLabel(widget_Ui)
        self.numl.setGeometry(QtCore.QRect(122, 132, 50, 35))
        self.numl.setObjectName("numl")
        self.number = QtWidgets.QComboBox(widget_Ui)
        self.number.setGeometry(QtCore.QRect(122, 177, 100, 35))
        self.number.setEditable(True)
        self.number.setInsertPolicy(QtWidgets.QComboBox.InsertAtBottom)
        self.number.setObjectName("number")
        self.line = QtWidgets.QFrame(widget_Ui)
        self.line.setGeometry(QtCore.QRect(518, 140, 16, 80))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.ability = QtWidgets.QComboBox(widget_Ui)
        self.ability.setGeometry(QtCore.QRect(1189, 175, 360, 35))
        self.ability.setObjectName("ability")
        self.name = QtWidgets.QComboBox(widget_Ui)
        self.name.setGeometry(QtCore.QRect(250, 177, 250, 35))
        self.name.setEditable(True)
        self.name.setObjectName("name")
        self.namel = QtWidgets.QLabel(widget_Ui)
        self.namel.setGeometry(QtCore.QRect(250, 132, 141, 35))
        self.namel.setObjectName("namel")
        self.notel = QtWidgets.QLabel(widget_Ui)
        self.notel.setGeometry(QtCore.QRect(820, 130, 50, 35))
        self.notel.setObjectName("notel")
        self.typel = QtWidgets.QLabel(widget_Ui)
        self.typel.setGeometry(QtCore.QRect(527, 132, 50, 35))
        self.typel.setObjectName("typel")
        self.abilityl = QtWidgets.QLabel(widget_Ui)
        self.abilityl.setGeometry(QtCore.QRect(1189, 130, 50, 35))
        self.abilityl.setObjectName("abilityl")
        self.line_3 = QtWidgets.QFrame(widget_Ui)
        self.line_3.setGeometry(QtCore.QRect(1180, 138, 16, 80))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.type2 = QtWidgets.QComboBox(widget_Ui)
        self.type2.setGeometry(QtCore.QRect(670, 175, 140, 35))
        self.type2.setEditable(True)
        self.type2.setObjectName("type2")
        self.type1 = QtWidgets.QComboBox(widget_Ui)
        self.type1.setGeometry(QtCore.QRect(528, 175, 140, 35))
        self.type1.setEditable(True)
        self.type1.setObjectName("type1")
        self.numl.setBuddy(self.number)
        self.notel.setBuddy(self.note)
        self.typel.setBuddy(self.type1)
        self.abilityl.setBuddy(self.ability)
        self.calc = QtWidgets.QPushButton(widget_Ui)
        self.calc.setGeometry(QtCore.QRect(610, 960, 140, 70))
        self.calc.setObjectName("calc")
        self.calc.setText('计算')
        self.retranslateUi(widget_Ui)
        QtCore.QMetaObject.connectSlotsByName(widget_Ui)
    def retranslateUi(self, widget_Ui):
        _translate = QtCore.QCoreApplication.translate
        widget_Ui.setWindowTitle(_translate("widget_Ui", "Form"))
        self.nature.setText(_translate("widget_Ui", "种族值"))
        self.growth.setText(_translate("widget_Ui", "努力值"))
        self.individual.setText(_translate("widget_Ui", "个体值"))
        self.Hp_growth_v.setText(_translate("widget_Ui", "0"))
        self.attack.setText(_translate("widget_Ui", "攻击"))
        self.attack_i.setText(_translate("widget_Ui", "31"))
        self.attack_growth_v.setText(_translate("widget_Ui", "0"))
        self.defence.setText(_translate("widget_Ui", "防御"))
        self.defence_i.setText(_translate("widget_Ui", "31"))
        self.Hp.setText(_translate("widget_Ui", "Hp"))
        self.Hp_i.setText(_translate("widget_Ui", "31"))
        self.defence_growth_v.setText(_translate("widget_Ui", "0"))
        self.s_attack.setText(_translate("widget_Ui", "特攻"))
        self.s_attack_i.setText(_translate("widget_Ui", "31"))
        self.s_attack_growth_v.setText(_translate("widget_Ui", "0"))
        self.s_defence.setText(_translate("widget_Ui", "特防"))
        self.s_defence_i.setText(_translate("widget_Ui", "31"))
        self.s_defence_growth_v.setText(_translate("widget_Ui", "0"))
        self.speed.setText(_translate("widget_Ui", "速度"))
        self.speed_i.setText(_translate("widget_Ui", "31"))
        self.speed_growth_v.setText(_translate("widget_Ui", "0"))
        self.Level_l.setText(_translate("widget_Ui", "等级："))
        self.Temp_l.setText(_translate("widget_Ui", "性格:"))
        self.numl.setText(_translate("widget_Ui", "编号"))
        self.namel.setText(_translate("widget_Ui", "宝可梦"))
        self.notel.setText(_translate("widget_Ui", "形态"))
        self.typel.setText(_translate("widget_Ui", "属性"))
        self.abilityl.setText(_translate("widget_Ui", "特性"))
    def initdata(self,data):
        #初始化个体值，默认全部v
        self.Hpind=int(self.Hp_i.text())
        self.attackind=int(self.attack_i.text())
        self.defenceind=int(self.defence_i.text())
        self.s_attackind=int(self.s_attack_i.text())
        self.s_defenceind=int(self.s_defence_i.text())
        self.speedind=int(self.speed_i.text())
        

        #初始化努力值，默认全部0
        self.Hpg=int(self.Hp_growth_v.text())
        self.attackg=int(self.attack_growth_v.text())
        self.defenceg=int(self.defence_growth_v.text())
        self.s_attackg=int(self.s_attack_growth_v.text())
        self.s_defenceg=int(self.s_defence_growth_v.text())
        self.speedg=int(self.speed_growth_v.text())

        #初始化宝可梦编号与名字的选项
        name_list=['']
        number_list=['']
        for individual in data:
            if individual['宝可梦'] in name_list:
                continue
            else:
                name_list.append(individual['宝可梦'])
        for individual in data:
            if individual['编号'] in number_list:
                continue
            else:
                number_list.append(individual['编号'])
        self.name.addItems(name_list)
        self.number.addItems(number_list)  

        #等级combobox
        self.level=50
        self.Level.addItems(['','50','100'])
        level_table=[]
        for i in range(1,101):
            level_table.append(str(i))
        self.Level.addItems(level_table)
        #选择性格
        self.positive=0
        self.negative=0
        self.Temp.addItem('')
        for i in self.Temperment:
            if i['正向加成']=='':
                row=i['性格']+'（均衡）'
            elif len(i['性格'])==2:
                row=i['性格']+' '+" +"+i['正向加成']+' -'+i['负向削弱']
            else:
                row=i['性格']+" +"+i['正向加成']+' -'+i['负向削弱']
            self.Temp.addItem(row)
    def buildconnection(self):
        ##建立信号与槽的连接(努力值)
        self.Hp_growth_v.textChanged.connect(self.ChangeHpG)
        self.attack_growth_v.textChanged.connect(self.ChangeAttackG)
        self.defence_growth_v.textChanged.connect(self.ChangeDefenceG)
        self.s_attack_growth_v.textChanged.connect(self.ChangeSattackG)
        self.s_defence_growth_v.textChanged.connect(self.ChangeSdefenceG)
        self.speed_growth_v.textChanged.connect(self.ChangeSpeedG)
        ##建立信号与槽的连接（个体值）
        self.Hp_i.textChanged.connect(self.ChangeHpInd)
        self.attack_i.textChanged.connect(self.ChangeAttackInd)
        self.defence_i.textChanged.connect(self.ChangeDefenceInd)
        self.s_attack_i.textChanged.connect(self.ChangeSattackInd)
        self.s_defence_i.textChanged.connect(self.ChangeSdefenceInd)
        self.speed_i.textChanged.connect(self.ChangeSpeedInd)
        ##建立滑块信号与槽连接
        self.Hp_slider.valueChanged.connect(self.ChangeHpG_s)
        self.attack_slider.valueChanged.connect(self.ChangeAttackG_s)
        self.defence_slider.valueChanged.connect(self.ChangeDefenceG_s)
        self.s_attack_slider.valueChanged.connect(self.ChangeSattackG_s)
        self.s_defence_slider.valueChanged.connect(self.ChangeSdefenceG_s)
        self.speed_slider.valueChanged.connect(self.ChangeSpeedG_s)
        ##combobox信号与槽的建立
        self.name.activated[str].connect(self.namesearch)
        self.number.activated[str].connect(self.numbersearch)
        self.note.activated[str].connect(self.decidenotation)
        self.Level.activated[str].connect(self.setLevel)
        self.Temp.activated[str].connect(self.setTemp)
        ##计算按钮信号与槽的建立
        self.calc.clicked.connect(self.finalize)
    def setrange(self):
        #限定个体，努力值仅为整数且各自在规定范围内
        intvalidatorI=QIntValidator(0,31)
        intvalidatorG=QIntValidator(0,252)
        self.Hp_growth_v.setValidator(intvalidatorG)
        self.attack_growth_v.setValidator(intvalidatorG)
        self.defence_growth_v.setValidator(intvalidatorG)
        self.s_attack_growth_v.setValidator(intvalidatorG)
        self.s_defence_growth_v.setValidator(intvalidatorG)
        self.speed_growth_v.setValidator(intvalidatorG)

        self.Hp_i.setValidator(intvalidatorI)
        self.attack_i.setValidator(intvalidatorI)
        self.defence_i.setValidator(intvalidatorI)
        self.s_attack_i.setValidator(intvalidatorI)
        self.s_defence_i.setValidator(intvalidatorI)
        self.speed_i.setValidator(intvalidatorI)
    def namesearch(self,s):
        NO=[]
        I=[]
        for individual in self.data:
            if individual['宝可梦'] == s:
                I.append(individual)
                N=individual['编号']
                NO.append(individual['注释'])
                self.number.setCurrentText(N)
            if s=='':
                self.number.setCurrentIndex(0)
                self.type1.setCurrentIndex(0)
                self.type2.setCurrentIndex(0)
                self.note.clear()
                self.ability.clear()

        if len(I) == 1:
            self.note.clear()
        elif len(I) > 1:
            self.note.clear()
            self.note.addItems(NO)
        else:
            return
        A=[I[0]['特性1'],I[0]['特性2'],I[0]['隐藏特性']]
        for a in A[1:]:
            if a=='the same':
                A.remove(a)
        if len(A) > 1:
            A[-1]=A[-1]+"（梦特）"
        self.ability.clear()
        self.ability.addItems(A)
        self.getdata(I[0])
        self.type1.setCurrentText(I[0]['属性1'])
        self.type2.setCurrentText(I[0]['属性2'])
    def numbersearch(self,s):
        NO=[]
        I=[]
        for individual in self.data:
            if individual['编号'] == s:
                I.append(individual)
                NAME=individual['宝可梦']
                NO.append(individual['注释'])
                self.name.setCurrentText(NAME)
            if s=='':
                self.number.setCurrentIndex(0)
                self.type1.setCurrentIndex(0)
                self.type2.setCurrentIndex(0)
                self.note.clear()
                self.ability.clear()
        if len(I) == 1:
            self.note.clear()
        elif len(I) > 1:
            self.note.clear()
            self.note.addItems(NO)
        else:
            return
        A=[I[0]['特性1'],I[0]['特性2'],I[0]['隐藏特性']]
        for a in A[1:]:
            if a=='the same':
                A.remove(a)
        if len(A) > 1:
            A[-1]=A[-1]+"（梦特）"
        self.ability.clear()
        self.ability.addItems(A)
        self.getdata(I[0])
        self.type1.setCurrentText(I[0]['属性1'])
        self.type2.setCurrentText(I[0]['属性2'])
    def decidenotation(self,s):
        NAME=self.name.currentText()
        I=[]
        for individual in self.data:
            if individual['宝可梦'] == NAME:
                I.append(individual)
        for individual in I:
            if individual['注释'] == s:
                I=individual
                self.getdata(individual)
                break
        A=[I['特性1'],I['特性2'],I['隐藏特性']]
        for a in A[1:]:
            if a=='the same':
                A.remove(a)
        if len(A) > 1:
            A[-1]=A[-1]+"（梦特）"
        self.ability.clear()
        self.ability.addItems(A)
        
    def getdata(self,i):
        self.Hpn=int(i["Hp"])
        self.attackn=int(i["攻击"])
        self.defencen=int(i["防御"])
        self.s_attackn=int(i["特攻"])
        self.s_defencen=int(i["特防"])
        self.speedn=int(i["速度"])

        self.Hp_n.setText(str(self.Hpn))
        self.attack_n.setText(str(self.attackn))
        self.defence_n.setText(str(self.defencen))
        self.s_attack_n.setText(str(self.s_attackn))
        self.s_defence_n.setText(str(self.s_defencen))
        self.speed_n.setText(str(self.speedn))
        
    #个体值输入信号槽
    def ChangeHpInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return 
        if int(self.sender().text())>31:
            self.Hpind=31
            self.Hp_i.setText('31')
        else:
            self.Hpind=int(self.sender().text())
    def ChangeAttackInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>31:
            self.attackind=31
            self.attack_i.setText('31')
        else:
            self.attackind=int(self.sender().text())
    def ChangeDefenceInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>31:
            self.defenceind=31
            self.defence_i.setText('31')
        else:
            self.defenceind=int(self.sender().text())
    def ChangeSattackInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>31:
            self.s_attackind=31
            self.s_attack_i.setText('31')
        else:
            self.s_attackind=int(self.sender().text())
    def ChangeSdefenceInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>31:
            self.s_defenceind=31
            self.s_defence_i.setText('31')
        else:
            self.s_defenceind=int(self.sender().text())
    def ChangeSpeedInd(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>31:
            self.speedind=31
            self.speed_i.setText('31')
        else:
            self.speedind=int(self.sender().text())
        
    #努力值输入信号槽
    def ChangeHpG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.Hpg=252
            self.Hp_growth_v.setText('252')
        else:
            self.Hpg=int(self.sender().text())
    def ChangeAttackG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.attackg=252
            self.attack_growth_v.setText('252')
        else:
            self.attackg=int(self.sender().text())
    def ChangeDefenceG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.defenceg=252
            self.defence_growth_v.setText('252')
        else:
            self.defenceg=int(self.sender().text())
    def ChangeSattackG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.s_attackg=252
            self.s_attack_growth_v.setText('252')
        else:
            self.s_attackg=int(self.sender().text())
    def ChangeSdefenceG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.s_defenceg=252
            self.s_defence_growth_v.setText('252')
        else:
            self.s_defenceg=int(self.sender().text())
    def ChangeSpeedG(self):
        try:
            int(self.sender().text())
        except ValueError:
            return
        if int(self.sender().text())>252:
            self.speedg=252
            self.speed_growth_v.setText('252')
        else:
            self.speedg=int(self.sender().text())

    #将滑块模块变化连接到努力值显示，并更新数据
    def ChangeHpG_s(self):
        value=self.sender().value()       
        self.Hp_growth_v.setText(str(value))
    def ChangeAttackG_s(self):
        value=self.sender().value()       
        self.attack_growth_v.setText(str(value))
    def ChangeDefenceG_s(self):
        value=self.sender().value()       
        self.defence_growth_v.setText(str(value))
    def ChangeSattackG_s(self):
        value=self.sender().value()       
        self.s_attack_growth_v.setText(str(value))
    def ChangeSdefenceG_s(self):
        value=self.sender().value()       
        self.s_defence_growth_v.setText(str(value))
    def ChangeSpeedG_s(self):
        value=self.sender().value()       
        self.speed_growth_v.setText(str(value))
    def setLevel(self,s):
        if s=='':
            return
        if int(s)>100:
            self.Level.setCurrentIndex(-1)
        self.level=int(self.Level.currentText())
    def setTemp(self,s):
        if s=='':
            self.positive=0
            self.negative=0
            return
        elif len(s)<9:
            self.positive=0
            self.negative=0
        else:
            judge=self.Temp.currentText()[0:3]
            judge=judge.replace(' ','')
            for i in self.Temperment:
                if i['性格'] == judge:
                    self.positive=i['正向加成']
                    self.negative=i['负向削弱']
    def finalize(self):
        if self.Hpn==1:
            self.Hp_v=1
        else:
            self.Hp_v=int((self.Hpn*2+self.Hpind+int(self.Hpg/4))*self.level/100+10+self.level)
            self.attack_v=int(((self.attackn*2+self.attackind+int(self.attackg/4))*self.level/100)+5)
            self.defence_v=int(((self.defencen*2+self.defenceind+int(self.defenceg/4))*self.level/100)+5)
            self.s_attack_v=int(((self.s_attackn*2+self.s_attackind+int(self.s_attackg/4))*self.level/100)+5)
            self.s_defence_v=int(((self.s_defencen*2+self.s_defenceind+int(self.s_defenceg/4))*self.level/100)+5)
            self.speed_v=int(((self.speedn*2+self.speedind+int(self.speedg/4))*self.level/100)+5)
            #创造一个伟Hp公式以解决画图时公式不一致导致的可视化问题
            self.Hp_fake=int(((self.Hpn*2+self.Hpind+int(self.Hpg/4))*self.level/100)+5)
            #考虑性格修正，默认无修正
        if self.positive==0:
            pass
        if self.positive=='攻击':
            self.attack_v=int(self.attack_v*1.1)
        if self.positive=='防御':
            self.defence_v=int(self.defence_v*1.1)
        if self.positive=='特攻':
           self.s_attack_v=int(self.s_attack_v*1.1)
        if self.positive=='特防':
            self.s_defence_v=int(self.s_defence_v*1.1)
        if self.positive=='速度':
            self.speed_v=int(self.speed_v*1.1)

        if self.negative==0:
            pass
        if self.negative=='攻击':
            self.attack_v=int(self.attack_v*0.9)
        if self.negative=='防御':
            self.defence_v=int(self.defence_v*0.9)
        if self.negative=='特攻':
            self.s_attack_v=int(self.s_attack_v*0.9)
        if self.negative=='特防':
            self.s_defence_v=int(self.s_defence_v*0.9)
        if self.negative=='速度':
            self.speed_v=int(self.speed_v*0.9)
        self.visulization()
    def visulization(self):
        dr = Figure_Canvas(self.Hp_fake,self.attack_v,self.defence_v,self.s_attack_v,self.s_defence_v,self.speed_v,self.Hp_v)
        #实例化一个FigureCanvas
        dr.draw_diagram()  # 画图
        #dr.draw()
        graphicscene = QtWidgets.QGraphicsScene()  #创建一个QGraphicsScene
        graphicscene.addWidget(dr)  #把图形放到QGraphicsScene中
        self.value_star.setScene(graphicscene)
        self.value_star.show()
        

app=QApplication(sys.argv)

#将UI加入系统变量并展示
my_win=Ui_widget_Ui(database)
my_win.show()
sys.exit(app.exec_())